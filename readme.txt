Для работы этого туториала необходимо выполнить:
https://github.com/despair1/eve_sso_tutorial
Так, чтобы в oauth_database_path=c:/eveauth/oauth_database.sql был авторизован 1 торговый персонаж,
одновременную работу с 2мя и более торговыми персонажами данный туториал не предусматривает

Создать esi python client, через swagger web codegen, maven у меня не получилось
Esi python client, созданый через docker в Linux Ming и Linux Debian, выдает ошибку при импорте
Данный туториал обращается на прямую к https://esi.tech.ccp.is по указаным в документации путям

Вначале в config.txt ( из папки этого туториала ) уточните ваши налоги:
buy_broker_fee=0.003
sell_broker_fee=0.0208
sales_tax=0.01

Затем запустите read_wallet_transaction.py
Это вначале обновит токен: refresh_token.update_database()
Потом запустит цикл, считывающий транзакции c https://esi.tech.ccp.is, до тех пор пока они на закончатся на сервере,
или совпадут с уже имеющимися в базе данных
wallet_models.Transactions.insert_json(transactions2database) - вставит транзакции, полученные циклом, в базу данных,
скорость вставки на среднем компе 1000 транзакций в секунду ( по уму - если будет на сервере обрабатываться
множество персонажей, нужно будет переписать этот код на c++ )
names.update_database() - считает с esi universe names в базу данных название каждого расчитаного товара


Чтобы проверить успех эксперимента:
show_profit.py
выдаст сумарную прибыль за последние 10,30 дней
и среднюю дневную прибыль по каждой позиции, покупки и продажи которой превысили profit_sum_limit=100000000

Прибыль расчитывается по формуле:
(средняя цена продажы*(1-sales_tax)*(1-sell_broker_fee)-средняя цена покупки*(1+buy_broker_fee ) * количество проданного
товара
Цены и количество берутся за указанное число дней